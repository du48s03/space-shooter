<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initializing
//player_id = 0
state = 0;
weap_cursor = 0;
num_weapon = ds_map_size(ctrl_setting.weapon_index);
for(i = 2;i&gt;=0; i--){
    selected_weapon[i] = num_weapon;//random
}

hmargin = 10;
xsep = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///checking registeration
var num_weapon = ds_map_size(ctrl_setting.weapon_index);
switch(state){
    case 0://unregistered
        if(keyboard_check_pressed(ctrl_setting.key_binding[player_id,3])){
            ctrl_register.registering[player_id] = true;
            state+=1;
            weap_cursor = 0;
        }
    break;
    case 1://choosing first weapon
        if(keyboard_check_pressed(ctrl_setting.key_binding[player_id,3])){
            weap_cursor+=1;
            state+=1;   
        }
        if(keyboard_check_pressed(ctrl_setting.key_binding[player_id,4])){
            state-=1;
            ctrl_register.registering[player_id] = false;
        }
        if(keyboard_check_pressed(ctrl_setting.key_binding[player_id,1])){
            selected_weapon[weap_cursor]=(selected_weapon[weap_cursor]-1)%(num_weapon+1);
            while(true){
                var used = false;
                for(i=0;i&lt;3;i++){
                    if(i!=weap_cursor 
                        &amp;&amp; selected_weapon[i] == selected_weapon[weap_cursor]
                        &amp;&amp; selected_weapon[weap_cursor] != num_weapon
                        ){
                        used = true;
                        break;   
                    }
                }
                if(used) selected_weapon[weap_cursor]=(selected_weapon[weap_cursor]-1)%(num_weapon+1);
                else break;
            }    
        }
        if(keyboard_check_pressed(ctrl_setting.key_binding[player_id,2])){
            selected_weapon[weap_cursor]=(selected_weapon[weap_cursor]+1)%(num_weapon+1);
            while(true){
                var used = false;
                for(i=0;i&lt;3;i++){
                    if(i!=weap_cursor 
                        &amp;&amp; selected_weapon[i] == selected_weapon[weap_cursor]
                        &amp;&amp; selected_weapon[weap_cursor] != num_weapon
                        ){
                        used = true;
                        break;   
                    }
                }
                if(used) selected_weapon[weap_cursor]=(selected_weapon[weap_cursor]+1)%(num_weapon+1);
                else break;
            }            
        }
    break;
    case 2://choosing second weapon
        if(keyboard_check_pressed(ctrl_setting.key_binding[player_id,3])){
            weap_cursor+=1;
            state+=1;   
        }
        if(keyboard_check_pressed(ctrl_setting.key_binding[player_id,4])){
            weap_cursor-=1;
            state-=1;
        }
        if(keyboard_check_pressed(ctrl_setting.key_binding[player_id,1])){
            selected_weapon[weap_cursor]=(selected_weapon[weap_cursor]-1)%(num_weapon+1);
            while(true){
                var used = false;
                for(i=0;i&lt;3;i++){
                    if(i!=weap_cursor 
                        &amp;&amp; selected_weapon[i] == selected_weapon[weap_cursor]
                        &amp;&amp; selected_weapon[weap_cursor] != num_weapon
                        ){
                        used = true;
                        break;   
                    }
                }
                if(used) selected_weapon[weap_cursor]=(selected_weapon[weap_cursor]-1)%(num_weapon+1);
                else break;
            }        
        }
        if(keyboard_check_pressed(ctrl_setting.key_binding[player_id,2])){
            selected_weapon[weap_cursor]=(selected_weapon[weap_cursor]+1)%(num_weapon+1);
            while(true){
                var used = false;
                for(i=0;i&lt;3;i++){
                    if(i!=weap_cursor 
                        &amp;&amp; selected_weapon[i] == selected_weapon[weap_cursor]
                        &amp;&amp; selected_weapon[weap_cursor] != num_weapon
                        ){
                        used = true;
                        break;   
                    }
                }
                if(used) selected_weapon[weap_cursor]=(selected_weapon[weap_cursor]+1)%(num_weapon+1);
                else break;
            }    
        }
    break;
    case 3://choosing third weapon
        if(keyboard_check_pressed(ctrl_setting.key_binding[player_id,3])){
            ctrl_setting.registered_player[player_id] = true;
            //registering the weapons
            var temp;
            for(i = 2;i&gt;=0;i--){
                temp[i] = selectd_weapon[i];
            }
            for(i = 0;i&lt;3;i++){
                if(temp[i] == num_weapon){
                    temp[i] = floor(random(num_weapon));
                    while(true){
                        var used = false;
                        for(j=0;j&lt;3;j++){
                            used = used||(j!=i
                            &amp;&amp;temp[j]==temp[i]);
                        }
                        if(used) temp[i] = floor(random(num_weapon));
                        else break;
                    }
                }               
            }   
            for(i = 0;i&lt;3;i++){
                ctrl_setting.weapon_chosen[player_id,i] = ctrl_setting.weapon_list[temp[i]];
            }
            
            state+=1;
        }
        if(keyboard_check_pressed(ctrl_setting.key_binding[player_id,4])){
            weap_cursor-=1;
            state-=1;
        }
        if(keyboard_check_pressed(ctrl_setting.key_binding[player_id,1])){
            selected_weapon[weap_cursor]=(selected_weapon[weap_cursor]-1)%(num_weapon+1);
            while(true){
                var used = false;
                for(i=0;i&lt;3;i++){
                    if(i!=weap_cursor 
                        &amp;&amp; selected_weapon[i] == selected_weapon[weap_cursor]
                        &amp;&amp; selected_weapon[weap_cursor] != num_weapon
                        ){
                        used = true;
                        break;   
                    }
                }
                if(used) selected_weapon[weap_cursor]=(selected_weapon[weap_cursor]-1)%(num_weapon+1);
                else break;
            }               
        }
        if(keyboard_check_pressed(ctrl_setting.key_binding[player_id,2])){
            selected_weapon[weap_cursor]=(selected_weapon[weap_cursor]+1)%(num_weapon+1);
            while(true){
                var used = false;
                for(i=0;i&lt;3;i++){
                    if(i!=weap_cursor 
                        &amp;&amp; selected_weapon[i] == selected_weapon[weap_cursor]
                        &amp;&amp; selected_weapon[weap_cursor] != num_weapon
                        ){
                        used = true;
                        break;   
                    }
                }
                if(used) selected_weapon[weap_cursor]=(selected_weapon[weap_cursor]+1)%(num_weapon+1);
                else break;
            }
        }
    break;
    case 4://ready
        if(keyboard_check_pressed(ctrl_setting.key_binding[player_id,4])){
            state -= 1;
            ctrl_setting.registered_player[player_id] = false;
        }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing
if(state==0){
    draw_set_font(font_default);
    draw_set_color(c_yellow);
    draw_text_ext(x+hmargin,room_height/2,"PRESS FIRE TO JOIN",-1,room_width/4-2*hmargin);
}
if(state&gt;0){
    draw_set_color(c_blue);
    draw_rectangle(x,y,x+room_width/4,y+room_height,false);   
    draw_sprite(spr_player, 0, x+room_width/2, room_height/3);
    
    var xpos = hmargin;
    for(i = 0;i&lt;3;i++){
        var chosen_sprite = spr_icon_random;
        if(selected_weapon[i] != ds_map_size(ctrl_setting.weapon_index))
            chosen_sprite = ctrl_setting.weapon_icons[selected_weapon[i]];
        draw_sprite(chosen_sprite,0,xpos,room_height*2/3);
        
        if(state == i+1){
            draw_set_color(c_green);
            draw_rectangle(
                xpos,
                room_height*2/3, 
                xpos+sprite_get_width(chosen_sprite),
                room_height*2/3+sprite_get_height(chosen_sprite),
                true);
        }
        xpos+= xsep + sprite_get_width(chosen_sprite);
    }
}
if(state==4){//ready
    draw_set_color(c_black);
    draw_set_alpha(0.5);
    draw_rectangle(x,y,x+room_width/4,y+room_height,false);
    draw_set_alpha(1);
    draw_set_color(c_white);    
    draw_text_ext(x+hmargin,room_height/2,"READY!",5,room_width/4-2*hmargin);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
