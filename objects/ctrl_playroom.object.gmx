<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize
gameover = false;

//Creating players;


for(i = 0; i&lt;4; i++){
    if(ctrl_setting.registered_player[i]){
        player[i] = instance_create(ctrl_setting.init_x[i], ctrl_setting.init_y[i], obj_player);
        
        player[i].key_acc = ctrl_setting.key_binding[i, 0];
        player[i].key_left = ctrl_setting.key_binding[i, 1];
        player[i].key_right = ctrl_setting.key_binding[i, 2];
        player[i].key_fire = ctrl_setting.key_binding[i, 3];
        player[i].key_switch = ctrl_setting.key_binding[i, 4];
        player[i].acc = ctrl_setting.default_acc;
        player[i].max_hp = ctrl_setting.max_hp;
        player[i].max_fuel = ctrl_setting.max_fuel;
        player[i].now_weapon = 0;
        player[i].player_id = i;
        
        //set colors
        
        //Creating HUD
        HUD[i] = instance_create(view_xview[view_current],view_yview[view_current],obj_HUD);
        HUD[i].player = player[i];
        HUD[i].xoffset = view_wport[0]/4*i;
        HUD[i].yoffset = 0;
        HUD[i].width = view_wport[0]/4;
        HUD[i].height = view_hport[0];
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///show end game
instance_create(x,y, ctrl_gameover);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check end game
if(instance_number(obj_player) &lt;= 1 &amp;&amp; !gameover){
    gameover = true;
    alarm[0] = room_speed*2;
}
//if(alarm[0]!=0){show_message(string(alarm[0])+","+string(gameover)); }


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Collision
with(obj_player){
    with(obj_player){
        //show_message("self = "+string(self.id)+"\nother = "+string(other.id));
        if(status[0]&gt;0) continue;
        if(other.id&gt;self.id &amp;&amp; collision_circle(x,y,sprite_width/2,other.id,true,true) ){
            //show_message("collision happend"+string(power(power(x-other.x,2)+power(y-other.y,2),0.5)));
            other.hp-=50;
            hp-=50;
            /*            
            var perp = -hspeed*cos(angle) - vspeed*sin(angle);
            var perp_other = other.hspeed*cos(angle)+other.vspeed*sin(angle);
            other.hspeed += -perp*cos(angle)-perp_other*cos(angle);
            other.vspeed += -perp*sin(angle)-perp_other*sin(angle);
            hspeed += perp*cos(angle)+perp_other*cos(angle);
            vspeed += perp*sin(angle)+perp_other*sin(angle);
            */
            elastic_collision(self, other, 1,1);
            var len =(sprite_get_bbox_bottom(sprite_index)-sprite_get_bbox_top(sprite_index))/2
                    +(sprite_get_bbox_bottom(other.sprite_index)-sprite_get_bbox_top(other.sprite_index))/2+3;
            //var len = power((power(sprite_width,2)+power(sprite_height,2)),0.5)+1;
            var dx = x-other.x;
            var dy = y-other.y;
            var center_x = (x+other.x)/2;
            var center_y = (y+other.y)/2;
            x = center_x + len/2* dx/power(dx*dx+dy*dy,0.5);
            y = center_y + len/2* dy/power(dx*dx+dy*dy,0.5);
            other.x = center_x - len/2* dx/power(dx*dx+dy*dy,0.5);
            other.y = center_y - len/2* dy/power(dx*dx+dy*dy,0.5);
            
            /*
            show_debug_message("player "+string(player_id)+": angle="+string(angle)); 
            show_debug_message("player "+string(player_id)+": perp="+string(perp)); 
            show_debug_message("player "+string(player_id)+": other.hspeed="+string(other.hspeed)); 
            show_debug_message("player "+string(player_id)+": other.vspeed="+string(other.vspeed)); 
            show_debug_message("player "+string(player_id)+": other.hspeed_inc="+string(-perp*cos(angle))); 
            show_debug_message("player "+string(player_id)+": other.vspeed_inc="+string(-perp*sin(angle))); 
            show_debug_message("player "+string(player_id)+": self.hspeed="+string(self.hspeed)); 
            show_debug_message("player "+string(player_id)+": self.vspeed="+string(self.vspeed)); 
            */
            //show_message("collision detected: "+ string(player_id)+" into "+string(other.player_id));
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="113">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
