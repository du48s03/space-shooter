<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize
hmargin = 30;
tmargin = 30;
bmargin = 70;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move the view
if(instance_number(obj_player)==0) return noone;
var center_x = 0;
var center_y = 0;
var min_x = room_width;
var min_y = room_height;
var max_x = 0;
var max_y = 0;
for(i = 0; i &lt; instance_number(obj_player); i++){
    var player = instance_find(obj_player,i); 
    center_x += player.x;
    center_y += player.y;
    min_x = min(min_x, player.x);
    min_y = min(min_y, player.y);
    max_x = max(max_x, player.x);
    max_y = max(max_y, player.y);
}
/*
center_x /= instance_number(obj_player);
center_y /= instance_number(obj_player);
*/
center_x = (min_x+max_x)/2;
center_y = (min_y+max_y)/2;

var hwratio = view_hport[0]/view_wport[0];
var viewwidth =  max(max_x-min_x+2*hmargin, view_wport[0]);
var viewheight = max(max_y-min_y+tmargin+bmargin, view_hport[0]);
if(viewheight/viewwidth &lt; hwratio){
    viewheight = viewwidth*hwratio;
}
else{
    viewwidth = viewheight/hwratio;
}
view_wview[view_current] = viewwidth;
view_hview[view_current] = viewheight;

view_xview[view_current] = center_x-viewwidth/2;
view_yview[view_current] = center_y-(viewheight-bmargin-tmargin)/2-tmargin;
if(view_xview[view_current] &lt; 0) view_xview[view_current] = 0;
if(view_yview[view_current] &lt; 0) view_yview[view_current] = 0;
if(view_xview[view_current] + viewwidth &gt; room_width ) view_xview[view_current] = room_width-viewwidth;
if(view_yview[view_current] + viewheight &gt; room_height ) view_yview[view_current] = room_height-viewheight;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
