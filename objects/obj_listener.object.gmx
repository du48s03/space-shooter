<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initializing
//player_id = 0
state = 0;
weap_cursor = 0;
num_weapon = ds_map_size(ctrl_setting.weapon_index);
for(i = 2;i&gt;=0; i--){
    selected_weapon[i] = num_weapon;//random
}

hmargin = 10;
xsep = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///checking registeration
var num_weapon = ds_map_size(ctrl_setting.weapon_index);
switch(state){
    case 0://unregistered
        if(keyboard_check_pressed(ctrl_setting.key_binding[player_id,3])){
            ctrl_register.registering[player_id] = true;
            state+=1;
            weap_cursor = 0;
            audio_play_sound(snd_join_game, 80, false);
        }
    break;
    case 1://choosing first weapon
        if(keyboard_check_pressed(ctrl_setting.key_binding[player_id,3])){
            weap_cursor+=1;
            state+=1;   
        }
        if(keyboard_check_pressed(ctrl_setting.key_binding[player_id,4])){
            state-=1;
            ctrl_register.registering[player_id] = false;
        }
        if(keyboard_check_pressed(ctrl_setting.key_binding[player_id,1])){
            change_weapon_sel(false);
        }
        if(keyboard_check_pressed(ctrl_setting.key_binding[player_id,2])){
            change_weapon_sel(true);   
        }
    break;
    case 2://choosing second weapon
        if(keyboard_check_pressed(ctrl_setting.key_binding[player_id,3])){
            weap_cursor+=1;
            state+=1;   
        }
        if(keyboard_check_pressed(ctrl_setting.key_binding[player_id,4])){
            weap_cursor-=1;
            state-=1;
        }
        if(keyboard_check_pressed(ctrl_setting.key_binding[player_id,1])){
            change_weapon_sel(false);
        }
        if(keyboard_check_pressed(ctrl_setting.key_binding[player_id,2])){
            change_weapon_sel(true);
        }
    break;
    case 3://choosing third weapon
        if(keyboard_check_pressed(ctrl_setting.key_binding[player_id,3])){
            ctrl_setting.registered_player[player_id] = true;
            //registering the weapons
            var temp;
            for(i = 2;i&gt;=0;i--){
                temp[i] = selected_weapon[i];
            }
            for(i = 0;i&lt;3;i++){
                if(temp[i] == num_weapon){
                    temp[i] = floor(random(num_weapon));
                    while(true){
                        var used = false;
                        for(j=0;j&lt;3;j++){
                            used = used||(j!=i
                            &amp;&amp;temp[j]==temp[i]);
                        }
                        if(used) temp[i] = floor(random(num_weapon));
                        else break;
                    }
                }               
            }   
            for(i = 0;i&lt;3;i++){
                ctrl_setting.weapon_chosen[player_id,i] = ctrl_setting.weapon_list[temp[i]];
            }
            
            state+=1;
        }
        if(keyboard_check_pressed(ctrl_setting.key_binding[player_id,4])){
            weap_cursor-=1;
            state-=1;
        }
        if(keyboard_check_pressed(ctrl_setting.key_binding[player_id,1])){
            change_weapon_sel(false);
        }
        if(keyboard_check_pressed(ctrl_setting.key_binding[player_id,2])){
            change_weapon_sel(true);
        }
    break;
    case 4://ready
        if(keyboard_check_pressed(ctrl_setting.key_binding[player_id,4])){
            state -= 1;
            ctrl_setting.registered_player[player_id] = false;
        }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing
if(state==0){
    draw_set_font(font_default);
    draw_set_halign(fa_center);
    draw_text_ext_colour(x+room_width/8,
                        room_height/2,
                        "PRESS FIRE TO JOIN",
                        -1,
                        room_width/4-2*hmargin,
                        ctrl_setting.player_color[player_id],
                        ctrl_setting.player_color[player_id], 
                        c_white, 
                        c_white,
                        1);

}
if(state&gt;0){
    draw_set_color(ctrl_setting.player_color[player_id]);
    draw_rectangle(x,y,x+room_width/4,y+room_height,false);
    
    shader_set(HueConverter);
    var old_hue_handle = shader_get_uniform(HueConverter,"u_OldHue");
    var new_hue_handle = shader_get_uniform(HueConverter,"u_NewHue");
    var tol_handle = shader_get_uniform(HueConverter,"u_Tolerance");
    shader_set_uniform_f(old_hue_handle,ctrl_setting.hue_replace);
    shader_set_uniform_f(new_hue_handle,ctrl_setting.player_hue[player_id]);
    shader_set_uniform_f(tol_handle,ctrl_setting.hue_tol);
    draw_sprite(spr_player, 0, x+room_width/8, room_height/3);
    shader_reset();
    
    var xpos = x+hmargin;
    for(i = 0;i&lt;3;i++){
        var chosen_sprite = spr_icon_random;
        if(selected_weapon[i] != num_weapon)
            chosen_sprite = ctrl_setting.weapon_icons[selected_weapon[i]];
        var xwidth = (room_width/4-2*hmargin-2*xsep)/3;
        var ywidth = sprite_get_height(chosen_sprite) * xwidth/sprite_get_width(chosen_sprite);
        if(state == i+1){
            draw_set_color(c_white);
            draw_rectangle(
                xpos-3,
                room_height*2/3-3, 
                xpos+xwidth+3,
                room_height*2/3+ywidth+3,
                false);
        }
        
        draw_sprite_stretched(chosen_sprite,0,xpos,room_height*2/3,xwidth, ywidth);
        xpos+= xsep + xwidth;
    }
}
if(state==4){//ready
    draw_set_color(c_black);
    draw_set_alpha(0.5);
    draw_rectangle(x,y,x+room_width/4,y+room_height,false);
    draw_set_alpha(1);
    draw_set_color(c_white);    
    draw_text_ext(x+room_width/8,room_height/2,"READY!",5,room_width/4-2*hmargin);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
