<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>obj_base</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialization
//player_id
event_inherited();
rotate_speed = 4.0;
acc = 0.055;
direc = 90;
max_fuel = 400;
fuel = max_fuel;
fuel_recov = 1;
max_hp = 600;
hp = max_hp;

now_weapon = 0;

//---buff constants----
health_pack_eff = 120;
speed_up_time = room_speed*30;
speed_up_eff = 2;
scatter_shot_time = room_speed*30;
anti_gravity_time = room_speed*30;
fast_regen_time = room_speed*20;
fast_regen_eff = 2;

//---reset status-----
//0 = snared
//1 = speed up
//2 = scatter shot
//3 = anti-gravity
//4 = fast regen

for(i = 4; i&gt;=0; i--){
    status[i] = 0;
}



for(i = 2;i&gt;=0; i--){
    weapon_timer[i] = 0;
}
key_left = ord('A');
key_right = ord('D');
key_acc = ord('W');
key_fire = ord('S');
key_switch = ord('Q');

has_mass = true;
is_solid = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>532</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_effect</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>2</string>
          </argument>
          <argument>
            <kind>13</kind>
            <string>255</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_boomga</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update status and timers

for(i = 0; i&lt;3; i++){
    weapon_timer[i] -=1;
    if(weapon_timer[i] &lt; 0) weapon_timer[i] = 0;
}

for(i = 0; i&lt;5; i++){
    status[i] -=1;
    if(status[i]&lt;0) status[i] = 0;
}

if(hp &lt;= 0)
instance_destroy();//TODO: replace with a player_destroy routine

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Boundary Check
if(x-sprite_width/2 &lt;0){
    //hp -= 50;
    hspeed = max(-hspeed,2);
    x = sprite_width/2;
}
if(x+sprite_width/2 &gt; room_width){
    //hp -= 50;
    hspeed = min(-hspeed,-2);
    x = room_width-sprite_width;
}
if(y-sprite_height/2 &lt;0){
    //hp -= 50;
    vspeed = max(-vspeed,1);
    y = sprite_height/2;
}
if(y&gt;room_height){
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control
if(keyboard_check(key_left)){
    direc += rotate_speed;
}

if(keyboard_check(key_right)){
    direc -= rotate_speed;
}

if(keyboard_check(key_acc)){
    if(fuel&gt;=ctrl_setting.fuel_consume){
        if(status[1] != 0){
            hspeed += acc*cos(direc/180*pi) * speed_up_eff;
            vspeed -= acc*sin(direc/180*pi) * speed_up_eff;   
        }
        else{
            hspeed += acc*cos(direc/180*pi);
            vspeed -= acc*sin(direc/180*pi);   
        }
        fuel-=ctrl_setting.fuel_consume;
    }
}
else{
    if(fuel&lt;max_fuel)  {
        if(status[4] &gt;0)
            fuel+=fuel_recov*fast_regen_eff;
        else
            fuel+=fuel_recov;
    }
    if(fuel&gt;max_fuel)  fuel=max_fuel;
}

if(keyboard_check(key_fire)){
    fire_weapon();
}

if(keyboard_check_pressed(key_switch)){
    now_weapon = (now_weapon+1)%3;
    audio_play_sound(snd_change_weapon, 80, false);
}


if(direc &gt; 360) direc -=360;
if(direc &lt; 0) direc += 360;
if(status[3]==0)    vspeed += ctrl_setting.g;
var spd_limit = ctrl_setting.max_speed;
if(status[1]) spd_limit*=speed_up_eff;
if(speed &gt; spd_limit) speed = spd_limit;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_buff">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///get_buff
get_buff(other);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Costomized Draw method
image_angle = direc;

shader_set(HueConverter);
var old_hue_handle = shader_get_uniform(HueConverter,"u_OldHue");
var new_hue_handle = shader_get_uniform(HueConverter,"u_NewHue");
var tol_handle = shader_get_uniform(HueConverter,"u_Tolerance");
shader_set_uniform_f(old_hue_handle,ctrl_setting.hue_replace);
shader_set_uniform_f(new_hue_handle,ctrl_setting.player_hue[player_id]);
shader_set_uniform_f(tol_handle,ctrl_setting.hue_tol);
draw_sprite_ext(sprite_index, 0, x, y, 1,1,image_angle,c_white, 1);
shader_reset();

draw_set_color(c_green);
draw_rectangle( x-sprite_xoffset,y + sprite_height - sprite_yoffset,
                x-sprite_xoffset+sprite_width*hp/max_hp, y+sprite_height - sprite_yoffset+5, false);
draw_set_color(c_yellow);
draw_rectangle( x-sprite_xoffset,y + sprite_height - sprite_yoffset + 7,
                x-sprite_xoffset+sprite_width*fuel/max_fuel, y+sprite_height - sprite_yoffset+12, false);
//draw_text(x-sprite_xoffset,y + sprite_height - sprite_yoffset, "HP:"+string(hp)+"/"+string(max_hp));
//draw_text(x-sprite_xoffset,y + sprite_height - sprite_yoffset + 10, "Power:"+string(fuel)+"/"+string(max_fuel));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
